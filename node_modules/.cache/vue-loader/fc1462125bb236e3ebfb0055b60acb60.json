{"remainingRequest":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/src/App.vue","mtime":1639200000681},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/css-loader/index.js","mtime":1638740287498},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1638740285686},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/postcss-loader/lib/index.js","mtime":1638740286326},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/cache-loader/dist/cjs.js","mtime":1638740288110},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/vue-loader/lib/index.js","mtime":1638740285574}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninput[type=\"text\"], textarea, input[type=\"password\"] {\n  outline: none;\n  box-shadow:none !important;\n  border:1px solid #ccc !important;\n}\n\n::-webkit-scrollbar {\n    width: 0;  /* Remove scrollbar space */\n    background: transparent;  /* Optional: just make scrollbar invisible */\n}\n/* Optional: show position indicator in red */\n::-webkit-scrollbar-thumb {\n    background: #FF0000;\n}\n\n.messages-main {\n  overflow-y: scroll;\n  height: 90%;\n}\n\n.users {\n  padding: 0px !important;\n  border: 1px solid gray;\n}\n.no-margin {\n  margin: 0px;\n}\n.messages-area {\n  border: 1px solid gray;\n  padding: 0px !important;\n  max-height: 91vh;\n}\n.input-message {\n  height: 40px;\n}\n.active {\n  background: #5d17b8 !important;\n  border: #5d17b8 !important;\n}\n.select-chat {\n  margin-top: 35vh;\n  padding: 8px;\n}\n.main-area {\n  margin: 0px;\n  min-height: 91vh;\n  font-family: 'Source Sans Pro', sans-serif;\n}\n.logged_user {\n  color: white;\n}\n.container-fluid {\n  padding:0;\n  margin-right:auto;\n  margin-left:auto;\n}\n\n* {\n  overflow: scroll;\n  overflow-x: hidden;\n}\n\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuPA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <Register v-if=\"!authenticated && register\" v-on:authenticated=\"setAuthenticated\" v-on:register=\"setAuthRoute\"/>\n    <Login v-if=\"!authenticated && !register\" v-on:authenticated=\"setAuthenticated\" v-on:register=\"setAuthRoute\"/>\n    <b-container fluid h-100 v-if=\"authenticated\">\n      <NavBar :logged_user=\"logged_user_username\" />\n      <b-row class=\"main-area\" id=\"main-area\">\n        <b-col cols=\"2\" class=\"users\">\n          <Users :users=\"users\" v-on:chat=\"chat\" />\n        </b-col>\n        <b-col cols=\"10\" class=\"messages-area\" id=\"messages-area\">\n          <div class=\"messages-main\" id=\"messages-main\">\n            <div \n              v-if=\"!current_chat_channel\" \n              class=\"select-chat text-center\"\n            >\n              Chat with someone... \n            </div>\n            <Messages \n              v-else \n              :active_chat=\"active_chat_id\" \n              :messages=\"messages[current_chat_channel]\"\n            /> \n          </div>\n          <MessageInput v-on:send_message=\"send_message\" />\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Register from \"./components/Register.vue\";\nimport Users from \"./components/Users.vue\";\nimport Pusher from \"pusher-js\";\n\n// Declare pusher variable so it's global to this file.\nlet pusher;\n\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput,\n    NavBar,\n    Messages,\n    Users,\n    Login,\n    Register\n  },\n  data: function() {\n    return {\n      messages: {},\n      users: [],\n      active_chat_id: null,\n      active_chat_index: null,\n      logged_user_id: null,\n      logged_user_username: null,\n      current_chat_channel: null,\n      authenticated: false,\n      register: false\n    };\n  },\n  methods: {\n    async setAuthenticated(login_status, user_data) {\n      \n      // Update the states\n      this.logged_user_id = user_data.id;\n      this.logged_user_username = user_data.username;\n      this.authenticated = login_status;\n      this.token = user_data.token;\n      \n      // Initialize Pusher JavaScript library\n      pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n          cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n          authEndpoint: \"/api/pusher/auth\",\n          auth: {\n            headers: {\n              Authorization: \"Bearer \" + this.token\n            }\n          }\n      });\n      \n      // Get all the users from the server\n      const users = await this.axios.get(\"https://chatty-api-python.herokuapp.com/api/users\", {\n        headers: { Authorization: \"Bearer \" + this.token }\n      });\n      \n      // Get all users excluding the current logged user\n      this.users = users.data.filter(\n        user => user.userName != user_data.username\n      );\n\n      var notifications = pusher.subscribe(\n        `private-notification_user_${this.logged_user_id}`\n      );\n          \n      notifications.bind(\"new_chat\", data => {\n        const isSubscribed = pusher.channel(data.channel_name);\n        if (!isSubscribed) {\n          const one_on_one_chat = pusher.subscribe(data.channel_name);\n          \n          this.$set(this.messages, data.channel_name, []);\n          \n          one_on_one_chat.bind(\"new_message\", data => {\n            // Check if the current chat channel is where the message is coming from\n            if (\n              data.channel !== this.current_chat_channel &&\n              data.from_user !== this.logged_user_id\n            ) {\n              // Get the index of the user that sent the message\n              const index = this.users.findIndex(\n                user => user.id == data.from_user\n              );\n              // Set the has_new_message status of the user to true\n              this.$set(this.users, index, {\n                ...this.users[index],\n                has_new_message: true\n              });\n              \n            }\n              \n            this.messages[data.channel].push({\n              message: data.message,\n              from_user: data.from_user,\n              to_user: data.to_user,\n              channel: data.channel\n            });\n          });\n        }\n      });\n    },\n\n    getMessage: function(channel_name) {\n      this.axios\n        .get(`https://chatty-api-python.herokuapp.com/api/get_message/${channel_name}`, {\n          headers: { Authorization: \"Bearer \" + this.token }\n        })\n        .then(response => {\n          this.$set(this.messages, channel_name, response.data);\n          this.scrollToEnd();\n        });\n    },\n\n    chat: function(id) {\n      this.active_chat_id = id;\n      \n      // Get index of the current chatting user...\n      this.active_chat_index = this.users.findIndex(\n        user => user.id == this.active_chat_id\n      );\n      \n      // Set the has_new_message status of the user to true\n      this.$set(this.users, this.active_chat_index, {\n        ...this.users[this.active_chat_index],\n        has_new_message: false\n      });\n      \n      this.axios\n        .post(\n          \"https://chatty-api-python.herokuapp.com/api/request_chat\",\n          {\n            from_user: this.logged_user_id,\n            to_user: this.active_chat_id\n          },\n          { headers: { Authorization: \"Bearer \" + this.token } }\n        )\n        .then(response => {\n          this.users[this.active_chat_index][\"channel_name\"] =\n            response.data.channel_name;\n            \n          this.current_chat_channel = response.data.channel_name;\n          \n          // Get messages on this channel\n          this.getMessage(response.data.channel_name);\n          \n          var isSubscribed = pusher.channel(response.data.channel_name);\n          \n          if (!isSubscribed) {\n            var channel = pusher.subscribe(response.data.channel_name);\n            \n            this.$set(this.messages, response.data.channel_name, []);\n            \n            channel.bind(\"new_message\", data => {\n              //Check if the current chat channel is where the message is comming from\n              if (\n                data.channel !== this.current_chat_channel &&\n                data.from_user !== this.logged_user_id\n              ) {\n                // Set the has_new_message status of the user to true\n                this.$set(this.users, this.active_chat_index, {\n                  ...this.users[this.active_chat_index],\n                  has_new_message: true\n                });\n              }\n              \n              this.messages[response.data.channel_name].push({\n                message: data.message,\n                from_user: data.from_user,\n                to_user: data.to_user,\n                channel: data.channel\n              });\n            });\n          }\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n\n    send_message: function(message) {\n      this.axios\n      \n      .post(\n        \"https://chatty-api-python.herokuapp.com/api/send_message\",\n        {\n          from_user: this.logged_user_id,\n          to_user: this.active_chat_id,\n          message: message,\n          channel: this.current_chat_channel\n        },\n        { headers: { Authorization: \"Bearer \" + this.token } }\n      )\n\n      .then(_ => {\n          this.scrollToEnd();\n          this.chat(this.active_chat_id)\n      });\n    },\n\n    scrollToEnd: function() {    \t\n      let container = this.$el.querySelector(\"#messages-main\");\n      container.scrollTop = container.scrollHeight + 100;\n    },\n\n    async setAuthRoute(status) {\n      this.register = status;\n    }\n  },\n};\n</script>\n\n<style>\n\ninput[type=\"text\"], textarea, input[type=\"password\"] {\n  outline: none;\n  box-shadow:none !important;\n  border:1px solid #ccc !important;\n}\n\n::-webkit-scrollbar {\n    width: 0;  /* Remove scrollbar space */\n    background: transparent;  /* Optional: just make scrollbar invisible */\n}\n/* Optional: show position indicator in red */\n::-webkit-scrollbar-thumb {\n    background: #FF0000;\n}\n\n.messages-main {\n  overflow-y: scroll;\n  height: 90%;\n}\n\n.users {\n  padding: 0px !important;\n  border: 1px solid gray;\n}\n.no-margin {\n  margin: 0px;\n}\n.messages-area {\n  border: 1px solid gray;\n  padding: 0px !important;\n  max-height: 91vh;\n}\n.input-message {\n  height: 40px;\n}\n.active {\n  background: #5d17b8 !important;\n  border: #5d17b8 !important;\n}\n.select-chat {\n  margin-top: 35vh;\n  padding: 8px;\n}\n.main-area {\n  margin: 0px;\n  min-height: 91vh;\n  font-family: 'Source Sans Pro', sans-serif;\n}\n.logged_user {\n  color: white;\n}\n.container-fluid {\n  padding:0;\n  margin-right:auto;\n  margin-left:auto;\n}\n\n* {\n  overflow: scroll;\n  overflow-x: hidden;\n}\n\n</style>\n"]}]}