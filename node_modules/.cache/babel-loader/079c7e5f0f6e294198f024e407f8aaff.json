{"remainingRequest":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/babel-loader/lib/index.js!/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/src/App.vue","mtime":1639116161696},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/cache-loader/dist/cjs.js","mtime":1638740288110},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/babel-loader/lib/index.js","mtime":1638740288414},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/cache-loader/dist/cjs.js","mtime":1638740288110},{"path":"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/vue-loader/lib/index.js","mtime":1638740285574}],"contextDependencies":[],"result":["import _objectSpread from \"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/stacychoco/InternetSeminar/pusher-chat-sentiment-analysis/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Register from \"./components/Register.vue\";\nimport Users from \"./components/Users.vue\";\nimport Pusher from \"pusher-js\"; // Declare pusher variable so it's global to this file.\n\nvar pusher;\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput: MessageInput,\n    NavBar: NavBar,\n    Messages: Messages,\n    Users: Users,\n    Login: Login,\n    Register: Register\n  },\n  data: function data() {\n    return {\n      messages: {},\n      users: [],\n      active_chat_id: null,\n      active_chat_index: null,\n      logged_user_id: null,\n      logged_user_username: null,\n      current_chat_channel: null,\n      authenticated: false,\n      register: false\n    };\n  },\n  methods: {\n    setAuthenticated: function () {\n      var _setAuthenticated = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(login_status, user_data) {\n        var _this = this;\n\n        var users, notifications;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Update the states\n                this.logged_user_id = user_data.id;\n                this.logged_user_username = user_data.username;\n                this.authenticated = login_status;\n                this.token = user_data.token; // Initialize Pusher JavaScript library\n\n                pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n                  cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n                  authEndpoint: \"/api/pusher/auth\",\n                  auth: {\n                    headers: {\n                      Authorization: \"Bearer \" + this.token\n                    }\n                  }\n                }); // Get all the users from the server\n\n                _context.next = 7;\n                return this.axios.get(\"/api/users\", {\n                  headers: {\n                    Authorization: \"Bearer \" + this.token\n                  }\n                });\n\n              case 7:\n                users = _context.sent;\n                // Get all users excluding the current logged user\n                this.users = users.data.filter(function (user) {\n                  return user.userName != user_data.username;\n                });\n                notifications = pusher.subscribe(\"private-notification_user_\".concat(this.logged_user_id));\n                notifications.bind(\"new_chat\", function (data) {\n                  var isSubscribed = pusher.channel(data.channel_name);\n\n                  if (!isSubscribed) {\n                    var one_on_one_chat = pusher.subscribe(data.channel_name);\n\n                    _this.$set(_this.messages, data.channel_name, []);\n\n                    one_on_one_chat.bind(\"new_message\", function (data) {\n                      // Check if the current chat channel is where the message is coming from\n                      if (data.channel !== _this.current_chat_channel && data.from_user !== _this.logged_user_id) {\n                        // Get the index of the user that sent the message\n                        var index = _this.users.findIndex(function (user) {\n                          return user.id == data.from_user;\n                        }); // Set the has_new_message status of the user to true\n\n\n                        _this.$set(_this.users, index, _objectSpread({}, _this.users[index], {\n                          has_new_message: true\n                        }));\n                      }\n\n                      _this.messages[data.channel].push({\n                        message: data.message,\n                        from_user: data.from_user,\n                        to_user: data.to_user,\n                        channel: data.channel\n                      });\n                    });\n                  }\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function setAuthenticated(_x, _x2) {\n        return _setAuthenticated.apply(this, arguments);\n      };\n    }(),\n    getMessage: function getMessage(channel_name) {\n      var _this2 = this;\n\n      this.axios.get(\"/api/get_message/\".concat(channel_name), {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      }).then(function (response) {\n        _this2.$set(_this2.messages, channel_name, response.data);\n\n        _this2.scrollToEnd();\n      });\n    },\n    chat: function chat(id) {\n      var _this3 = this;\n\n      this.active_chat_id = id; // Get index of the current chatting user...\n\n      this.active_chat_index = this.users.findIndex(function (user) {\n        return user.id == _this3.active_chat_id;\n      }); // Set the has_new_message status of the user to true\n\n      this.$set(this.users, this.active_chat_index, _objectSpread({}, this.users[this.active_chat_index], {\n        has_new_message: false\n      }));\n      this.axios.post(\"/api/request_chat\", {\n        from_user: this.logged_user_id,\n        to_user: this.active_chat_id\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      }).then(function (response) {\n        _this3.users[_this3.active_chat_index][\"channel_name\"] = response.data.channel_name;\n        _this3.current_chat_channel = response.data.channel_name; // Get messages on this channel\n\n        _this3.getMessage(response.data.channel_name);\n\n        var isSubscribed = pusher.channel(response.data.channel_name);\n\n        if (!isSubscribed) {\n          var channel = pusher.subscribe(response.data.channel_name);\n\n          _this3.$set(_this3.messages, response.data.channel_name, []);\n\n          channel.bind(\"new_message\", function (data) {\n            //Check if the current chat channel is where the message is comming from\n            if (data.channel !== _this3.current_chat_channel && data.from_user !== _this3.logged_user_id) {\n              // Set the has_new_message status of the user to true\n              _this3.$set(_this3.users, _this3.active_chat_index, _objectSpread({}, _this3.users[_this3.active_chat_index], {\n                has_new_message: true\n              }));\n            }\n\n            _this3.messages[response.data.channel_name].push({\n              message: data.message,\n              from_user: data.from_user,\n              to_user: data.to_user,\n              channel: data.channel\n            });\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    send_message: function send_message(message) {\n      var _this4 = this;\n\n      this.axios.post(\"/api/send_message\", {\n        from_user: this.logged_user_id,\n        to_user: this.active_chat_id,\n        message: message,\n        channel: this.current_chat_channel\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + this.token\n        }\n      }).then(function (_) {\n        _this4.scrollToEnd();\n      });\n    },\n    scrollToEnd: function scrollToEnd() {\n      var container = this.$el.querySelector(\"#messages-main\");\n      container.scrollTop = container.scrollHeight + 100;\n    },\n    setAuthRoute: function () {\n      var _setAuthRoute = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(status) {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.register = status;\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function setAuthRoute(_x3) {\n        return _setAuthRoute.apply(this, arguments);\n      };\n    }()\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <Register v-if=\"!authenticated && register\" v-on:authenticated=\"setAuthenticated\" v-on:register=\"setAuthRoute\"/>\n    <Login v-if=\"!authenticated && !register\" v-on:authenticated=\"setAuthenticated\" v-on:register=\"setAuthRoute\"/>\n    <b-container fluid h-100 v-if=\"authenticated\">\n      <NavBar :logged_user=\"logged_user_username\" />\n      <b-row class=\"main-area\" id=\"main-area\">\n        <b-col cols=\"2\" class=\"users\">\n          <Users :users=\"users\" v-on:chat=\"chat\" />\n        </b-col>\n        <b-col cols=\"10\" class=\"messages-area\" id=\"messages-area\">\n          <div class=\"messages-main\" id=\"messages-main\">\n            <div \n              v-if=\"!current_chat_channel\" \n              class=\"select-chat text-center\"\n            >\n              Chat with someone... \n            </div>\n            <Messages \n              v-else \n              :active_chat=\"active_chat_id\" \n              :messages=\"messages[current_chat_channel]\"\n            /> \n          </div>\n          <MessageInput v-on:send_message=\"send_message\" />\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport MessageInput from \"./components/MessageInput.vue\";\nimport Messages from \"./components/Messages.vue\";\nimport NavBar from \"./components/NavBar.vue\";\nimport Login from \"./components/Login.vue\";\nimport Register from \"./components/Register.vue\";\nimport Users from \"./components/Users.vue\";\nimport Pusher from \"pusher-js\";\n\n// Declare pusher variable so it's global to this file.\nlet pusher;\n\nexport default {\n  name: \"app\",\n  components: {\n    MessageInput,\n    NavBar,\n    Messages,\n    Users,\n    Login,\n    Register\n  },\n  data: function() {\n    return {\n      messages: {},\n      users: [],\n      active_chat_id: null,\n      active_chat_index: null,\n      logged_user_id: null,\n      logged_user_username: null,\n      current_chat_channel: null,\n      authenticated: false,\n      register: false\n    };\n  },\n  methods: {\n    async setAuthenticated(login_status, user_data) {\n      \n      // Update the states\n      this.logged_user_id = user_data.id;\n      this.logged_user_username = user_data.username;\n      this.authenticated = login_status;\n      this.token = user_data.token;\n      \n      // Initialize Pusher JavaScript library\n      pusher = new Pusher(process.env.VUE_APP_PUSHER_KEY, {\n          cluster: process.env.VUE_APP_PUSHER_CLUSTER,\n          authEndpoint: \"/api/pusher/auth\",\n          auth: {\n            headers: {\n              Authorization: \"Bearer \" + this.token\n            }\n          }\n      });\n      \n      // Get all the users from the server\n      const users = await this.axios.get(\"/api/users\", {\n        headers: { Authorization: \"Bearer \" + this.token }\n      });\n      \n      // Get all users excluding the current logged user\n      this.users = users.data.filter(\n        user => user.userName != user_data.username\n      );\n\n      var notifications = pusher.subscribe(\n        `private-notification_user_${this.logged_user_id}`\n      );\n          \n      notifications.bind(\"new_chat\", data => {\n        const isSubscribed = pusher.channel(data.channel_name);\n        if (!isSubscribed) {\n          const one_on_one_chat = pusher.subscribe(data.channel_name);\n          \n          this.$set(this.messages, data.channel_name, []);\n          \n          one_on_one_chat.bind(\"new_message\", data => {\n            // Check if the current chat channel is where the message is coming from\n            if (\n              data.channel !== this.current_chat_channel &&\n              data.from_user !== this.logged_user_id\n            ) {\n              // Get the index of the user that sent the message\n              const index = this.users.findIndex(\n                user => user.id == data.from_user\n              );\n              // Set the has_new_message status of the user to true\n              this.$set(this.users, index, {\n                ...this.users[index],\n                has_new_message: true\n              });\n              \n            }\n              \n            this.messages[data.channel].push({\n              message: data.message,\n              from_user: data.from_user,\n              to_user: data.to_user,\n              channel: data.channel\n            });\n          });\n        }\n      });\n    },\n\n    getMessage: function(channel_name) {\n      this.axios\n        .get(`/api/get_message/${channel_name}`, {\n          headers: { Authorization: \"Bearer \" + this.token }\n        })\n        .then(response => {\n          this.$set(this.messages, channel_name, response.data);\n          this.scrollToEnd();\n        });\n    },\n\n    chat: function(id) {\n      this.active_chat_id = id;\n      \n      // Get index of the current chatting user...\n      this.active_chat_index = this.users.findIndex(\n        user => user.id == this.active_chat_id\n      );\n      \n      // Set the has_new_message status of the user to true\n      this.$set(this.users, this.active_chat_index, {\n        ...this.users[this.active_chat_index],\n        has_new_message: false\n      });\n      \n      this.axios\n        .post(\n          \"/api/request_chat\",\n          {\n            from_user: this.logged_user_id,\n            to_user: this.active_chat_id\n          },\n          { headers: { Authorization: \"Bearer \" + this.token } }\n        )\n        .then(response => {\n          this.users[this.active_chat_index][\"channel_name\"] =\n            response.data.channel_name;\n            \n          this.current_chat_channel = response.data.channel_name;\n          \n          // Get messages on this channel\n          this.getMessage(response.data.channel_name);\n          \n          var isSubscribed = pusher.channel(response.data.channel_name);\n          \n          if (!isSubscribed) {\n            var channel = pusher.subscribe(response.data.channel_name);\n            \n            this.$set(this.messages, response.data.channel_name, []);\n            \n            channel.bind(\"new_message\", data => {\n              //Check if the current chat channel is where the message is comming from\n              if (\n                data.channel !== this.current_chat_channel &&\n                data.from_user !== this.logged_user_id\n              ) {\n                // Set the has_new_message status of the user to true\n                this.$set(this.users, this.active_chat_index, {\n                  ...this.users[this.active_chat_index],\n                  has_new_message: true\n                });\n              }\n              \n              this.messages[response.data.channel_name].push({\n                message: data.message,\n                from_user: data.from_user,\n                to_user: data.to_user,\n                channel: data.channel\n              });\n            });\n          }\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n\n    send_message: function(message) {\n      this.axios\n      \n      .post(\n        \"/api/send_message\",\n        {\n          from_user: this.logged_user_id,\n          to_user: this.active_chat_id,\n          message: message,\n          channel: this.current_chat_channel\n        },\n        { headers: { Authorization: \"Bearer \" + this.token } }\n      )\n\n      .then(_ => {\n          this.scrollToEnd();\n      });\n    },\n\n    scrollToEnd: function() {    \t\n      let container = this.$el.querySelector(\"#messages-main\");\n      container.scrollTop = container.scrollHeight + 100;\n    },\n\n    async setAuthRoute(status) {\n      this.register = status;\n    }\n  },\n};\n</script>\n\n<style>\n\ninput[type=\"text\"], textarea, input[type=\"password\"] {\n  outline: none;\n  box-shadow:none !important;\n  border:1px solid #ccc !important;\n}\n\n::-webkit-scrollbar {\n    width: 7px;\n}\n\n::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgb(246, 246, 246);\n    border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    border-radius: 10px;\n    background-color:#cccccc;\n    -webkit-box-shadow: inset 0 0 6px rgba(153, 153, 153, 0.7);\n}\n\n.messages-main {\n  overflow-y: scroll;\n  height: 90%;\n}\n\n.users {\n  padding: 0px !important;\n  border: 1px solid gray;\n}\n.no-margin {\n  margin: 0px;\n}\n.messages-area {\n  border: 1px solid gray;\n  padding: 0px !important;\n  max-height: 91vh;\n}\n.input-message {\n  height: 40px;\n}\n.active {\n  background: #5d17b8 !important;\n  border: #5d17b8 !important;\n}\n.select-chat {\n  margin-top: 35vh;\n  padding: 8px;\n}\n.main-area {\n  margin: 0px;\n  min-height: 91vh;\n  font-family: 'Source Sans Pro', sans-serif;\n}\n.logged_user {\n  color: white;\n}\n.container-fluid {\n  padding:0;\n  margin-right:auto;\n  margin-left:auto;\n}\n\n* {\n  overflow: hidden;\n}\n\n</style>\n"],"sourceRoot":"src"}]}